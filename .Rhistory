nucleo<-read.table("yeast3dnucleus.txt",header=TRUE)
nucleo[2:5]
nucleo[2:5][1]
nucleo[2:5][,1]
nucleo[2:5][1,]
nucleo[2:5][2,]
dist(nucleo[2:5][1,],nucleo[2:5][2,])
dist(rbind(nucleo[2:5][1,],nucleo[2:5][2,]))
rbind(nucleo[2:5][1,],nucleo[2:5][2,])
dist
?dist
rbind(nucleo[2:5][1,],nucleo[2:5][2,])
pruebita<-rbind(nucleo[2:5][1,],nucleo[2:5][2,])
pruebita
dist(pruebita)
dist(pruebita[2:4])
nucleo[3:5][1:10,]
dist(nucleo[3:5][1:10,])
?dist
dist(nucleo[3:5][1:10,],upper=TRUE)
dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)
dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)<3
dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)
dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)<3
dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)
prub<-dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)
prub<3
as.matrix(prub)
as.matrix(prub)<3
as.integer(as.matrix(prub)<3)
as.integer(as.matrix(as.matrix(prub)<3))
as.matrix(prub)<3
as.matrix(as.matrix(prub)<3)
as.integer(as.matrix(as.matrix(prub)<3))
as.matrix(as.integer(as.matrix(as.matrix(prub)<3)))
as.matrix(as.integer(as.matrix(prub)<3))
as.matrix(as.integer(as.matrix(prub)<3),10,10)
matrix(as.integer(as.matrix(prub)<3),10,10)
matrix(as.integer(as.matrix(prub)<2),10,10)
matrix(as.integer(as.matrix(prub)<1),10,10)
boxplot(nucleo)
boxplot(nucleo[-2])
boxplot(nucleo[3:5])
plot(nucleo[3:5])
require(lattice)
cloud(nucleo[3:5])
cloud(nucleo$X3D_x,nucleo$X3D_y ~ nucleo$X3D_z)
?cloud
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z)
?cloud
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=topo.colors(16))
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=heat.colors(16))
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=gray.colors(16))
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=terrain.colors(16))
topo.colors(16)
invert(topo.colors(16))
?topo.colors
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16))
?topo.colors
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16))
?cloud
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16),backsolve)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16),background)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16),background=1)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16),background=0.5)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16),background=0)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=cm.colors(16),background="black")
cm.colors(16)
rgb(cm.colors(16))
as.rgb(cm.colors(16))
plot(1:10,1,col= colorRampPalette(c("blue", "red"))(10)
)
plot(1:10,1,col= colorRampPalette(c("blue", "red"))(10))
plot(1:10,1,col= colorRampPalette(c("blue", "red"))[10])
plot(1:10,1,col= colorRampPalette(c("blue", "red")))
colorRampPalette(c("blue","red"))
colorRampPalette(c("blue","red"))(10)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("blue","red"))(16))
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("cyan","red"))(16))
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("cyan","red"))(16),xlab="X")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("cyan","red"))(16),xlab="X",ylab="Y",zlab="Z")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("cyan","red"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","red"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","cyan"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","pink"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","orange"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
png("nucleo.png")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","orange"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
dev.off()
ls()
q()
require(lattice)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","orange"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("purple","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)
ls()
prub
pruebita
as.matrix(prub)<3
dist(nucleo[3:5][1:10,],upper=TRUE,diag=TRUE)
lapply(nucleo[3:5][1:10,],dist, upper=TRUE,diag=TRUE)
sapply(nucleo[3:5][1:10,],dist, upper=TRUE,diag=TRUE)
apply(nucleo[3:5][1:10,],dist, upper=TRUE,diag=TRUE)
lapply(nucleo[3:5][1:10,],dist, upper=TRUE,diag=TRUE)
prob
pruebita
nucleo[3:5][1:10,]
nucleo[3:5][1:100,]
mininucleo<-nucleo[3:5][1:100,]
names(mininucleo)
rownames(mininucleo)
rownames(mininucleo)<-nucleo[2][1:100]
rownames(mininucleo)<-nucleo[2][1:100,]
mininucleo
dist(mininucleo)
nucleo[2]
head(nucleo[2])
sqrt(2)
sqrt(4)
nucleo[1,2]
nucleo[4,2]
nucleo[4,57]
nucleo[57,4]
ls
ls()
mininucleo
length(nucleo)
length(nucleo[2])
length(nucleo[[2]])
16538*16539*0.5
dist
q()
ls
ls()
prub
sqrt(10-3)
length(nucleo[[2]])
26538*26537*0.5
(26538*26537*0.5)/16
nucleo[2,3:5]
dist(rbind(nucleo[2,3:5],nucleo[4,3:5]))
unlist(dist(rbind(nucleo[2,3:5],nucleo[4,3:5])))
as.integer(dist(rbind(nucleo[2,3:5],nucleo[4,3:5])))
as.double(dist(rbind(nucleo[2,3:5],nucleo[4,3:5])))
as.vector(dist(rbind(nucleo[2,3:5],nucleo[4,3:5])))
26538*26537*0.5
6094916/26538*26537*0.5
6094916/(26538*26537*0.5)
150/24
7077032/(26538*26537*0.5)
print(algo)
print("algo")
cat("algo")
chopo
?cat
cat("algo\n")
cat("algo\n")
knsdnsa
cat(pruebita)
cat(as.double(dist(rbind(nucleo[2,3:5],nucleo[4,3:5]))))
cat(as.double(dist(rbind(nucleo[2,3:5],nucleo[4,3:5]))))
cat(paste(as.double(dist(rbind(nucleo[2,3:5],nucleo[4,3:5])))),"\n",sep="")
cat(paste(as.double(dist(rbind(nucleo[2,3:5],nucleo[4,3:5])))),"\n",sep="")
cat(paste(as.double(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.real(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.double(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.single(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(a.roman(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.roman(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.character(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
length(nucleo[[2]])
cat(paste(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))),"\n",sep="")
cat(paste(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
cat(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep="")
?cat
276502/(26538*26537*0.5)
1545913/(26538*26537*0.5)
seq(1:10)
as.dist(seq(1:10))
system.time(cat(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(print(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(print(as.double(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(print(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
print(as.symbol(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.double(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.float(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.raw(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.real(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.relistable(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.single(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.vector(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(cat(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(cat(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(cat(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(cat(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(cat(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5]))),"\n",sep=""))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
system.time(print(as.numeric(dist(rbind(nucleo[2,3:5],nucleo[5,3:5])))))
376466/(26538*26537*0.5)
14985255/(26538*26537*0.5)
100000/3600
100000/60
(100000/60)/24
ls()
q()
generaMIM<-function(x,y,n){
a<-rep(1,y*(x-y))
dim(a)<-c(y,x-y)
return(a)
}
generaDOR<-function(x,y,z,n){
a<-generaMIM(x,y,n)
for(i in 1:dim(a)[1]){
for(j in 1:dim(a)[2]){
if(runif(1)>z){
a[i,j]<-0
}
}
}
return(a)
}
generaEnriquecido<-function(x,y,z,r){
n<-length(x)
for(i in 1:n){
mot<-generaDOR(x[i],y[i],z[i],i)
lcero<-as.matrix(expand.grid(dimnames(mot)[[1]],dimnames(mot)[[2]]))
r<-listTOmatrix(r,lcero,0)
lmot<-listAdj(mot)
r<-listTOmatrix(r,lmot,1)
}
return(r)
}
matriz<-matrix(as.integer(runif(100)>0.5),10,10)
matriz
generaEnriquecido(2,3,0.8,matriz)
generaMIM
generaEnriquecido(3,2,0.8,matriz)
listAdj<-function(x){
y<-NULL
a<-dimnames(x)[[1]]
b<-dimnames(x)[[2]]
for(i in 1:dim(x)[1]){
for(j in 1:dim(x)[2]){
if(x[i,j]==1){
y<-c(y,a[i],b[j])
}
}
}
if(length(y)<2){
y<-c(a[1],b[1])
}
dim(y)<-c(2,length(y)/2)
return(t(y))
}
#funcion para convertir una lista de adyacencia en una matriz de adyacencia (requiere de dos vectores y un numero que es el valor a agregar)
listTOmatrix<-function(x,y,v){
l<-dim(y)[1]
z<-x
for(i in 1:l){
z[which(dimnames(z)[[1]]==y[i,1]),which(dimnames(z)[[2]]==y[i,2])]<-v
}
return(z)
}
generaEnriquecido(3,2,0.8,matriz)
generaEnriquecido(3,3,0.8,matriz)
generaEnriquecido(3,3,0.8,matriz)
dimnames(matriz)
matriz
colnames(matriz)
colnames(matriz)<-1:10
rownames(matriz)<-1:10
generaEnriquecido(3,3,0.8,matriz)
dimnames(matriz)
rownames(matriz)<-11:20
generaEnriquecido(3,3,0.8,matriz)
listAdj<-function(x){
y<-NULL
a<-dimnames(x)[[1]]
b<-dimnames(x)[[2]]
for(i in 1:dim(x)[1]){
for(j in 1:dim(x)[2]){
if(x[i,j]==1){
y<-c(y,a[i],b[j])
}
}
}
if(length(y)<2){
y<-c(a[1],b[1])
}
dim(y)<-c(2,length(y)/2)
return(t(y))
}
#funcion para convertir una lista de adyacencia en una matriz de adyacencia (requiere de dos vectores y un numero que es el valor a agregar)
listTOmatrix<-function(x,y,v){
l<-dim(y)[1]
z<-x
for(i in 1:l){
z[which(dimnames(z)[[1]]==y[i,1]),which(dimnames(z)[[2]]==y[i,2])]<-v
}
return(z)
}
#funcion para generar una red de tamanho x*y con una probabilidad p de conexion
rando<-function(x,prob){
r<-as.integer(runif(1)<prob)
return(r)
}
generaRed<-function(x,y,p){
z<-as.list(1:x*y)
red<-mclapply(z,rando,prob=p)
red<-unlist(red)
red<-matrix(red,x,y)
return(red)
}
#funcion para generar un MIM de tamanho x, con y tf (n es el numero de mim)
generaMIM<-function(x,y,n){
mimtf<-paste("tf",n,"mim",1:y,sep="")
mimtg<-paste("gen",n,"mim",1:(x-y),sep="")
a<-rep(1,y*(x-y))
dim(a)<-c(y,x-y)
dimnames(a)[[1]]<-mimtf
dimnames(a)[[2]]<-mimtg
return(a)
}
#funcion  para convertir un MIM en un DOR con alfa de z (n es el numero de DOR)
generaDOR<-function(x,y,z,n){
a<-generaMIM(x,y,n)
for(i in 1:dim(a)[1]){
for(j in 1:dim(a)[2]){
if(runif(1)>z){
a[i,j]<-0
}
}
}
return(a)
}
#funcion para generar un vector de listas con los nombres de los tfs y genes de los DOR de tamanho x y numero de tfs y
generaNombres<-function(x,y){
n<-length(x)
tfnames<-NULL
gennames<-NULL
helpy<-NULL
for(i in 1:n){
tfnames<-paste("tf",i,"mim",1:y[i],sep="")
gennames<-paste("gen",i,"mim",1:(x[i]-y[i]),sep="")
helpy<-cbind(helpy,list(tfnames,gennames))
}
return(helpy)
}
############################################################################
#funcion maestra que enriquece una red al azar con motivos DOR (x son los tamanhos de motivos, y son las cantidades de tf por motivo, z es la alfa de cada motivo, r es la red a la cual se le quiere agregar los DOR)
generaEnriquecido<-function(x,y,z,r){
n<-length(x)
helpy<-generaNombres(x,y)
tfnames<-unlist(helpy[1,])
gennames<-unlist(helpy[2,])
nn<-dim(r)[1]-length(tfnames)
for(i in 1:nn){
tfnames<-c(tfnames,paste("tfn",i,sep=""))
}
nn<-dim(r)[2]-length(gennames)
for(i in 1:nn){
gennames<-c(gennames,paste("genn",i,sep=""))
}
dimnames(r)[[1]]<-tfnames
dimnames(r)[[2]]<-gennames
for(i in 1:n){
mot<-generaDOR(x[i],y[i],z[i],i)
lcero<-as.matrix(expand.grid(dimnames(mot)[[1]],dimnames(mot)[[2]]))
r<-listTOmatrix(r,lcero,0)
lmot<-listAdj(mot)
r<-listTOmatrix(r,lmot,1)
}
return(r)
}
generaEnriquecido(3,2,0.5,matriz)
generaEnriquecido(5,3,0.5,matriz)
generaEnriquecido(5,3,0.8,matriz)
conDorsin<-generaEnriquecido(5,3,0.8,matriz)
dimm(conDorsin)
dim(conDorsin)
dimnames(conDorsin)
for(i in 1:dim(conDorsin)[1]){
}
reversin<-NULL
for(i in 1:dim(conDorsin)[1]){
reversin<-rbind(conDorsin[1,])
}
reversin
reversin<-NULL
for(i in 1:dim(conDorsin)[1]){
reversin<-rbind(reversin,conDorsin[1,])
}
reversin
reversin<-NULL
for(i in 1:dim(conDorsin)[1]){
reversin<-rbind(reversin,conDorsin[i,])
}
reversin
reversin<-NULL
for(i in 1:dim(conDorsin)[1]){
reversin<-rbind(reversin,conDorsin[dim(conDorsin)[1]-i,])
}
reversin
conDorsin
reversin<-NULL
dimensi<-dim(conDorsin)[1]-1
for(i in 0:dimensi){
reversin<-rbind(reversin,conDorsin[dimensi-i,])
}
reversin
reversin<-NULL
dimensi<-dim(conDorsin)[1]
for(i in 0:dimensi){
reversin<-rbind(reversin,conDorsin[dimensi-i,])
}
reversin
conDorsin
names(reversin)
colnames(reversin)
colnames(reversin)<-NULL
reversin
runif(1)
?runif
runif(1,0.5,1)
ls()
376466/(26538*26537*0.5)
(26538*26537*0.5)
25453777/(26538*26537*0.5)
734/60
(734/60)7
(734/60)/7
q()
length(nucleo[[2]])
313495063/(26538*26537*0.5)
8800/60
60*24
8800/1440
0.8903/6.111
6.1111/0.8903
q()
require(lattice)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("purple","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch=".")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="*")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch=20)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="+")
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="*")
?cloud
313495063/(26538*26537*0.5)
max(nucleo[[3]])
max(nucleo[[3]])
max(nucleo[[4]])
max(nucleo[[5]])
min(nucleo[[5]])
min(nucleo[[4]])
min(nucleo[[3]])
sqrt((max(nucleo[[3]])-min(nucleo[[3]]))^2)
sqrt((max(nucleo[[3]])-min(nucleo[[3]]))^2))
sqrt(((max(nucleo[[3]])-min(nucleo[[3]]))^2)+((max(nucleo[[4]])-min(nucleo[[4]]))^2)+((max(nucleo[[5]])-min(nucleo[[5]]))^2))
nucleo[[3]][1]
nucleo[[3]][2]
sqrt(((nucleo[[3]][1]-nucleo[[3]][2])^2)+((nucleo[[4]][1]-nucleo[[4]][2])^2)+((nucleo[[5]][1]-nucleo[[5]][2])^2))
sqrt(((nucleo[[3]][2]-nucleo[[3]][3])^2)+((nucleo[[4]][2]-nucleo[[4]][3])^2)+((nucleo[[5]][2]-nucleo[[5]][3])^2))
i
j
sqrt(((nucleo[[3]][i]-nucleo[[3]][i+1])^2)+((nucleo[[4]][i]-nucleo[[4]][i+1])^2)+((nucleo[[5]][i]-nucleo[[5]][i+1])^2))
i<-10000
sqrt(((nucleo[[3]][i]-nucleo[[3]][i+1])^2)+((nucleo[[4]][i]-nucleo[[4]][i+1])^2)+((nucleo[[5]][i]-nucleo[[5]][i+1])^2))
i<-1
sqrt(((nucleo[[3]][i]-nucleo[[3]][i+1])^2)+((nucleo[[4]][i]-nucleo[[4]][i+1])^2)+((nucleo[[5]][i]-nucleo[[5]][i+1])^2))
313495063/(26538*26537*0.5)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="*")
lims
lims<-c(50,75)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="*",ylim=lims,xlim=lims,zlim=lims)
lims<-c(75,100)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="*",ylim=lims,xlim=lims,zlim=lims)
lims<-c(50,100)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="*",ylim=lims,xlim=lims,zlim=lims)
q()
ls()
nucleo
nucleo$locus
plot(nucleo$locus)
cloud(nucleo$X3D_x ~ nucleo$X3D_y * nucleo$X3D_z, groups=nucleo$chrom, col=colorRampPalette(c("black","yellow"))(16),xlab="X",ylab="Y",zlab="Z", main="Nucleo",pch="*",ylim=lims,xlim=lims,zlim=lims)
ls()
lims
nucleo
nucleo$locus
which(nucleo$locus[2:length(nucleo$locus)]-nucleo$locus[1:(length(nucleo$locus)-1)]<0)
?cutree
?table
?cat
require(igraph)
?graph.adjacency
q()
